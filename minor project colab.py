# -*- coding: utf-8 -*-
"""Untitled30.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wPbDhbaw0My5CUemdyRLyXDMRQraOJ98
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

# Load the dataset
try:
    df = pd.read_csv('spotify dataset.csv')
    print("Dataset loaded successfully.")
except FileNotFoundError:
    print("Error: 'spotify dataset.csv' not found. Please ensure the file is in the same directory.")
    exit()

# Display the first few rows
print("\nDataset Info:")
df.info()

# Check for missing values
print("\nChecking for missing values:")
print(df.isnull().sum())

df.drop(['track_id', 'track_album_id', 'track_album_name', 'track_album_release_date',
         'playlist_id', 'playlist_subgenre'], axis=1, inplace=True)
df.drop_duplicates(inplace=True)
print(f"\nNumber of rows after removing duplicates: {df.shape[0]}")

# Identify numerical and categorical features
numerical_features = ['danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness',
                      'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo',
                      'duration_ms', 'track_popularity']
categorical_features = ['track_name', 'track_artist', 'playlist_name', 'playlist_genre']

# Distribution of numerical features
print("\nVisualizing distributions of numerical features...")
df[numerical_features].hist(bins=30, figsize=(20, 15))
plt.suptitle('Distribution of Numerical Features', y=1.02)
plt.tight_layout()
plt.show()

# Correlation Matrix
print("\nCreating a correlation matrix...")
plt.figure(figsize=(15, 12))
sns.heatmap(df[numerical_features].corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix of Audio Features')
plt.show()

# Select features for clustering. We will use the main audio features.
features_for_clustering = ['danceability', 'energy', 'loudness', 'speechiness', 'acousticness',
                           'instrumentalness', 'liveness', 'valence', 'tempo']

X = df[features_for_clustering]

# Scale the data using StandardScaler
print("\nScaling the data...")
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Determine the optimal number of clusters using the Elbow Method
print("Finding the optimal number of clusters using the Elbow Method...")
wcss = []  # Within-Cluster Sum of Squares
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42, n_init='auto')
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), wcss, marker='o', linestyle='--')
plt.title('Elbow Method to find Optimal K')
plt.xlabel('Number of Clusters (K)')
plt.ylabel('WCSS')
plt.xticks(range(1, 11))
plt.grid(True)
plt.show()

# let's assume we choose K=4. You can change this number.
optimal_k = 4
print(f"\nOptimal number of clusters chosen: {optimal_k}")

kmeans = KMeans(n_clusters=optimal_k, init='k-means++', random_state=42, n_init='auto')
df['cluster'] = kmeans.fit_predict(X_scaled)

# Display the size of each cluster
print("\nSize of each cluster:")
print(df['cluster'].value_counts())

# Visualize the clusters using PCA for 2D representation
print("\nVisualizing the clusters using PCA...")
pca = PCA(n_components=2)
principal_components = pca.fit_transform(X_scaled)
pca_df = pd.DataFrame(data=principal_components, columns=['PC1', 'PC2'])
pca_df['cluster'] = df['cluster']

plt.figure(figsize=(10, 8))
sns.scatterplot(x='PC1', y='PC2', hue='cluster', data=pca_df, palette='viridis', style='cluster')
plt.title('2D PCA Visualization of Clusters')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.legend()
plt.show()

cluster_analysis = df.groupby('cluster')[features_for_clustering].mean()
print("\nAverage feature values for each cluster:")
print(cluster_analysis)

# Example: Display a few songs from each cluster
for i in range(optimal_k):
    print(f"\n--- Songs from Cluster {i} ---")
    cluster_songs = df[df['cluster'] == i]
    if not cluster_songs.empty:
        print(cluster_songs[['track_name', 'track_artist', 'playlist_genre']].head(5))
    else:
        print("No songs in this cluster.")

print("\nProject complete. You can now analyze the cluster characteristics.")

